# Definição da versão do Docker Compose
# version: '3'

# Bloco de instruções comuns a vários containeres
x-airflow-common: &airflow-common
  build: ${AIRFLOW_PROJ_DIR:-.}
  env_file: &airflow-common-env
    - .env
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/configs:/opt/airflow/configs
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

# Declaração dos containeres
services:

  # Container do banco de dados - PostgreSQL
  postgres:
    image: postgres:13
    env_file:
      - .env
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  # Container do cache - Redis
  redis:
    image: redis:7.2.4
    expose:
      - 6379
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  # Container base do Airflow
  init:
    <<: *airflow-common
    command: airflow version

  # Container do Airflow UI - Airflow
  webserver:
    <<: *airflow-common
    command: airflow webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully

  scheduler:
    <<: *airflow-common
    command: airflow scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully
      webserver:
        condition: service_healthy

  triggerer:
    <<: *airflow-common
    command: airflow triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully
      scheduler:
        condition: service_healthy

  worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully
      scheduler:
        condition: service_healthy


